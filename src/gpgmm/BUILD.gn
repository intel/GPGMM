# Copyright 2020 The Dawn Authors
# Copyright 2021 The GPGMM Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("../../build_overrides/gpgmm_overrides_with_defaults.gni")

import("//build_overrides/build.gni")

# import("${gpgmm_root_dir}/scripts/gpgmm_component.gni")
import("${gpgmm_root_dir}/build_overrides/gpgmm_features.gni")

# Import mac_deployment_target
if (is_mac) {
  if (gpgmm_has_build) {
    import("//build/config/mac/mac_sdk.gni")
  } else {
    mac_deployment_target = "10.11.0"
  }
}

# The VVLs are an optional dependency, only use it if the path has been set.
# enable_vulkan_validation_layers = gpgmm_enable_vulkan_validation_layers &&
#                                   gpgmm_vulkan_validation_layers_dir != ""
# if (enable_vulkan_validation_layers) {
#   import("//build_overrides/vulkan_validation_layers.gni")
# }

# The Vulkan loader is an optional dependency, only use it if the path has been
# set.
# if (gpgmm_enable_vulkan) {
#   enable_vulkan_loader =
#       gpgmm_enable_vulkan_loader && gpgmm_vulkan_loader_dir != ""
# }

config("gpgmm_common_config") {
  configs = [ "${gpgmm_root_dir}/src/gpgmm/common:gpgmm_common_config" ]

  # Suppress warnings that Metal isn't in the deployment target of Chrome:
  # initialization of the Metal backend is behind a IsMetalSupported check so
  # gpgmm won't call Metal functions on macOS 10.10.
  # At the time this is written Chromium supports 10.10.0 and above, so if we
  # aren't on 10.11 it means we are on 10.11 and above, and Metal is available.
  # Skipping this check on 10.11 and above is important as it allows getting
  # proper compilation warning when using 10.12 and above feature for example.
  # TODO(crbug.com/1004024): Consider using API_AVAILABLE annotations on all
  # metal code in gpgmm once crbug.com/1004024 is sorted out if Chromium still
  # supports 10.10 then.
  if (is_mac && mac_deployment_target == "10.10.0") {
    cflags_objcc = [ "-Wno-unguarded-availability" ]
  }
}

# Config that adds the @executable_path rpath if needed so that Swiftshader or the Vulkan loader are found.
config("gpgmm_vulkan_rpath") {
  if (is_mac && gpgmm_enable_vulkan &&
      (use_swiftshader || enable_vulkan_loader)) {
    ldflags = [
      "-rpath",
      "@executable_path/",
    ]
  }
}

# Public gpgmm headers so they can be publicly visible for
# dependencies of gpgmm
source_set("gpgmm_headers") {
  # public_deps = [ "${gpgmm_root_dir}/src/gpgmm:gpgmmcpp_headers" ]
  all_dependent_configs =
      [ "${gpgmm_root_dir}/src/gpgmm/common:gpgmm_public_config" ]
  sources = [ "${gpgmm_root_dir}/src/include/gpgmm_export.h" ]
}

# The meat of the compilation for gpgmm so that we can cheaply have
# shared_library / static_library versions of it. It compiles all the files
# except those that define exported symbols.
source_set("gpgmm_sources") {
  deps = [
    ":gpgmm_headers",
    "${gpgmm_root_dir}/src/gpgmm/common:gpgmm_common_sources",
  ]

  defines = [ "GPGMM_IMPLEMENTATION" ]

  if (gpgmm_shared_library) {
    defines += [ "GPGMM_SHARED_LIBRARY" ]
  }

  if (gpgmm_always_record) {
    defines += [ "GPGMM_ALWAYS_RECORD" ]
  }

  if (gpgmm_enable_recording_until_termination) {
    defines += [ "GPGMM_ENABLE_RECORDING_UNTIL_TERMINATION" ]
  }

  if (gpgmm_enable_precise_allocator_debug) {
    defines += [ "GPGMM_ENABLE_PRECISE_ALLOCATOR_DEBUG" ]
  }

  libs = []
  data_deps = []

  configs += [ ":gpgmm_common_config" ]

  # Dependencies that are needed to compile gpgmm entry points in
  # FooBackend.cpp need to be public deps so they are propagated to the
  # gpgmm target
  #   public_deps = [ "${gpgmm_root_dir}/src/gpgmm_platform" ]

  sources = [
    "AllocatorNode.cpp",
    "AllocatorNode.h",
    "BlockAllocator.h",
    "BuddyBlockAllocator.cpp",
    "BuddyBlockAllocator.h",
    "BuddyMemoryAllocator.cpp",
    "BuddyMemoryAllocator.h",
    "ConditionalMemoryAllocator.cpp",
    "ConditionalMemoryAllocator.h",
    "Debug.cpp",
    "Debug.h",
    "Defaults.h",
    "Error.h",
    "GPUInfo.h",
    "IndexedMemoryPool.cpp",
    "IndexedMemoryPool.h",
    "LIFOMemoryPool.cpp",
    "LIFOMemoryPool.h",
    "Memory.cpp",
    "Memory.h",
    "MemoryAllocation.cpp",
    "MemoryAllocation.h",
    "MemoryAllocator.cpp",
    "MemoryAllocator.h",
    "MemoryCache.h",
    "MemoryPool.cpp",
    "MemoryPool.h",
    "PooledMemoryAllocator.cpp",
    "PooledMemoryAllocator.h",
    "SegmentedMemoryAllocator.cpp",
    "SegmentedMemoryAllocator.h",
    "Serializer.cpp",
    "Serializer.h",
    "SlabBlockAllocator.cpp",
    "SlabBlockAllocator.h",
    "SlabMemoryAllocator.cpp",
    "SlabMemoryAllocator.h",
    "TraceEvent.cpp",
    "TraceEvent.h",

    # "gpgmm_platform.h",
  ]

  #   if (gpgmm_use_x11) {
  #     libs += [ "X11" ]
  #     sources += [
  #       "XlibXcbFunctions.cpp",
  #       "XlibXcbFunctions.h",
  #     ]
  #   }

  # Only win32 app needs to link with user32.lib
  # In UWP, all availiable APIs are defined in WindowsApp.lib
  if (is_win && !gpgmm_is_winuwp) {
    libs += [ "user32.lib" ]
  }

  if (gpgmm_is_winuwp && is_debug) {
    # DXGIGetDebugInterface1 is defined in dxgi.lib
    # But this API is tagged as a development-only capability
    # which implies that linking to this function will cause
    # the application to fail Windows store certification
    # So we only link to it in debug build when compiling for UWP.
    # In win32 we load dxgi.dll using LoadLibrary
    # so no need for static linking.
    libs += [ "dxgi.lib" ]
  }

  # TODO(gpgmm:766):
  # Should link dxcompiler.lib and WinPixEventRuntime_UAP.lib in UWP
  # Somehow use dxcompiler.lib makes CoreApp unable to activate
  # WinPIX should be added as third party tools and linked statically

  if (gpgmm_enable_d3d12) {
    libs += [ "dxguid.lib" ]

    if (gpgmm_enable_d3d12_resource_alignment_warning) {
      defines += [ "GPGMM_ENABLE_D3D12_RESOURCE_ALIGNMENT_WARNING" ]
    }

    sources += [
      "d3d12/BufferAllocatorD3D12.cpp",
      "d3d12/BufferAllocatorD3D12.h",
      "d3d12/CapsD3D12.cpp",
      "d3d12/CapsD3D12.h",
      "d3d12/DebugD3D12.h",
      "d3d12/DebugResourceAllocatorD3D12.cpp",
      "d3d12/DebugResourceAllocatorD3D12.h",
      "d3d12/DefaultsD3D12.h",
      "d3d12/ErrorD3D12.cpp",
      "d3d12/ErrorD3D12.h",
      "d3d12/FenceD3D12.cpp",
      "d3d12/FenceD3D12.h",
      "d3d12/HeapD3D12.cpp",
      "d3d12/HeapD3D12.h",
      "d3d12/IUnknownImplD3D12.cpp",
      "d3d12/IUnknownImplD3D12.h",
      "d3d12/ResidencyManagerD3D12.cpp",
      "d3d12/ResidencyManagerD3D12.h",
      "d3d12/ResidencySetD3D12.cpp",
      "d3d12/ResidencySetD3D12.h",
      "d3d12/ResourceAllocationD3D12.cpp",
      "d3d12/ResourceAllocationD3D12.h",
      "d3d12/ResourceAllocatorD3D12.cpp",
      "d3d12/ResourceAllocatorD3D12.h",
      "d3d12/ResourceHeapAllocatorD3D12.cpp",
      "d3d12/ResourceHeapAllocatorD3D12.h",
      "d3d12/SerializerD3D12.cpp",
      "d3d12/SerializerD3D12.h",
      "d3d12/UtilsD3D12.cpp",
      "d3d12/UtilsD3D12.h",
      "d3d12/d3d12_platform.h",
    ]
  }
}

# Defines the type of target for GN to build.
# GN source set acts as a stand-in replacement for a static library.
# Unlike a static library, GN source set generates no intermediate object file
# and all compiled object files are linked into the final target.
# The GN style guide recommends source set over a static library to avoid
# generating this extra lib (docs/style_guide.md).
target_type = "source_set"
if (gpgmm_shared_library) {
  target_type = "shared_library"
}

target(target_type, "gpgmm") {
  public_deps = [ ":gpgmm_headers" ]
  deps = [ ":gpgmm_sources" ]
}
