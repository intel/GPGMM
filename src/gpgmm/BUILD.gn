# Copyright 2020 The Dawn Authors
# Copyright 2022 The GPGMM Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("../../build_overrides/gpgmm_overrides_with_defaults.gni")

import("//build_overrides/build.gni")

# import("${gpgmm_root_dir}/scripts/gpgmm_component.gni")
import("${gpgmm_root_dir}/build_overrides/gpgmm_features.gni")

# Import mac_deployment_target
if (is_mac) {
  if (gpgmm_has_build) {
    import("//build/config/mac/mac_sdk.gni")
  } else {
    mac_deployment_target = "10.11.0"
  }
}

# The VVLs are an optional dependency, only use it if the path has been set.
enable_vk_validation_layers =
    gpgmm_enable_vk_validation_layers && gpgmm_vk_validation_layers_dir != ""
if (enable_vk_validation_layers) {
  import("//build_overrides/vulkan_validation_layers.gni")
}

# The Vulkan loader is an optional dependency, only use it if the path has been
# set.
if (gpgmm_enable_vk) {
  enable_vk_loader = gpgmm_vk_static_functions ||
                     (gpgmm_enable_vk_loader && gpgmm_vk_loader_dir != "")
}

config("gpgmm_common_config") {
  configs = [ "${gpgmm_root_dir}/src/gpgmm/common:gpgmm_common_config" ]
}

# Config that adds the @executable_path rpath if needed so the Vulkan loader are found.
config("vulkan_rpath") {
  if (is_mac && gpgmm_enable_vk && enable_vk_loader) {
    ldflags = [
      "-rpath",
      "@executable_path/",
    ]
  }
}

config("vulkan_tools_include") {
  include_dirs = [ "${gpgmm_vk_tools_dir}" ]
}

# Public gpgmm headers so they can be publicly visible for
# dependencies of gpgmm
source_set("gpgmm_headers") {
  # public_deps = [ "${gpgmm_root_dir}/src/gpgmm:gpgmmcpp_headers" ]
  all_dependent_configs =
      [ "${gpgmm_root_dir}/src/gpgmm/common:gpgmm_public_config" ]
  sources = [ "${gpgmm_root_dir}/include/gpgmm_export.h" ]
}

# The meat of the compilation for gpgmm so that we can cheaply have
# shared_library / static_library versions of it. It compiles all the files
# except those that define exported symbols.
source_set("gpgmm_sources") {
  deps = [
    ":gpgmm_headers",
    "${gpgmm_root_dir}/src/gpgmm/common:gpgmm_common_sources",
    "${gpgmm_root_dir}/src/gpgmm/utils:gpgmm_utils_sources",
  ]

  libs = []
  data_deps = []

  configs += [ "${gpgmm_root_dir}/src/gpgmm/common:gpgmm_common_config" ]

  sources = []

  # Only win32 app needs to link with user32.lib
  # In UWP, all availiable APIs are defined in WindowsApp.lib
  if (is_win && !gpgmm_is_winuwp) {
    libs += [ "user32.lib" ]
  }

  if (gpgmm_is_winuwp && is_debug) {
    # DXGIGetDebugInterface1 is defined in dxgi.lib
    # But this API is tagged as a development-only capability
    # which implies that linking to this function will cause
    # the application to fail Windows store certification
    # So we only link to it in debug build when compiling for UWP.
    # In win32 we load dxgi.dll using LoadLibrary
    # so no need for static linking.
    libs += [ "dxgi.lib" ]
  }

  # TODO(gpgmm:766):
  # Should link dxcompiler.lib and WinPixEventRuntime_UAP.lib in UWP
  # Somehow use dxcompiler.lib makes CoreApp unable to activate
  # WinPIX should be added as third party tools and linked statically

  if (gpgmm_enable_d3d12) {
    libs += [ "dxguid.lib" ]

    sources += [
      "d3d12/BudgetUpdateD3D12.cpp",
      "d3d12/BudgetUpdateD3D12.h",
      "d3d12/BufferAllocatorD3D12.cpp",
      "d3d12/BufferAllocatorD3D12.h",
      "d3d12/CapsD3D12.cpp",
      "d3d12/CapsD3D12.h",
      "d3d12/D3D12Platform.h",
      "d3d12/DebugObjectD3D12.cpp",
      "d3d12/DebugObjectD3D12.h",
      "d3d12/ErrorD3D12.cpp",
      "d3d12/ErrorD3D12.h",
      "d3d12/EventMessageD3D12.h",
      "d3d12/FenceD3D12.cpp",
      "d3d12/FenceD3D12.h",
      "d3d12/JSONSerializerD3D12.cpp",
      "d3d12/JSONSerializerD3D12.h",
      "d3d12/LogD3D12.h",
      "d3d12/ResidencyHeapD3D12.cpp",
      "d3d12/ResidencyHeapD3D12.h",
      "d3d12/ResidencyListD3D12.cpp",
      "d3d12/ResidencyListD3D12.h",
      "d3d12/ResidencyManagerD3D12.cpp",
      "d3d12/ResidencyManagerD3D12.h",
      "d3d12/ResourceAllocationD3D12.cpp",
      "d3d12/ResourceAllocationD3D12.h",
      "d3d12/ResourceAllocationTrackingAllocatorD3D12.cpp",
      "d3d12/ResourceAllocationTrackingAllocatorD3D12.h",
      "d3d12/ResourceAllocatorD3D12.cpp",
      "d3d12/ResourceAllocatorD3D12.h",
      "d3d12/ResourceHeapAllocatorD3D12.cpp",
      "d3d12/ResourceHeapAllocatorD3D12.h",
      "d3d12/ResourceSizeD3D12.h",
      "d3d12/UnknownD3D12.cpp",
      "d3d12/UnknownD3D12.h",
      "d3d12/UtilsD3D12.cpp",
      "d3d12/UtilsD3D12.h",
    ]
  }

  if (gpgmm_enable_vk) {
    configs += [ ":vulkan_tools_include" ]
    deps += [ "${gpgmm_vk_tools_dir}:vulkan_tools_headers" ]
    public_deps = [ "${gpgmm_vk_headers_dir}:vulkan_headers" ]

    sources += [
      "vk/CapsVk.cpp",
      "vk/CapsVk.h",
      "vk/DeviceMemoryAllocatorVk.cpp",
      "vk/DeviceMemoryAllocatorVk.h",
      "vk/DeviceMemoryVk.cpp",
      "vk/DeviceMemoryVk.h",
      "vk/ErrorVk.h",
      "vk/FunctionsVk.cpp",
      "vk/FunctionsVk.h",
      "vk/ResourceAllocatorVk.cpp",
      "vk/ResourceAllocatorVk.h",
    ]

    if (gpgmm_vk_static_functions) {
      defines = [ "GPGMM_STATIC_VULKAN_FUNCTIONS" ]
    }

    if (enable_vk_validation_layers) {
      defines += [
        "GPGMM_ENABLE_VK_VALIDATION_LAYERS",
        "GPGMM_VK_DATA_DIR=\"$vulkan_data_subdir\"",
      ]
    }

    if (enable_vk_loader) {
      # Loader must be a linked dependency when using importing functions statically.
      if (gpgmm_vk_static_functions) {
        deps += [ "${gpgmm_vk_loader_dir}:libvulkan" ]
      } else {
        data_deps += [ "${gpgmm_vk_loader_dir}:libvulkan" ]
      }
    }
  }
}

# Defines the type of target for GN to build.
# GN source set acts as a stand-in replacement for a static library.
# Unlike a static library, GN source set generates no intermediate object file
# and all compiled object files are linked into the final target.
# The GN style guide recommends source set over a static library to avoid
# generating this extra lib (docs/style_guide.md).
target_type = "source_set"
if (gpgmm_shared_library) {
  target_type = "shared_library"
}

target(target_type, "gpgmm") {
  public_deps = [ ":gpgmm_headers" ]
  deps = [ ":gpgmm_sources" ]
  public_configs = [ ":vulkan_rpath" ]

  if (gpgmm_enable_vk) {
    if (enable_vk_validation_layers) {
      data_deps =
          [ "${gpgmm_vk_validation_layers_dir}:vulkan_validation_layers" ]
      if (!is_android) {
        data_deps +=
            [ "${gpgmm_vk_validation_layers_dir}:vulkan_gen_json_files" ]
      }
    }
  }
}
