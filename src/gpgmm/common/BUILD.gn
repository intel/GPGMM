# Copyright 2019 The Dawn Authors
# Copyright 2021 The GPGMM Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("../../../build_overrides/gpgmm_overrides_with_defaults.gni")

import("//build_overrides/build.gni")
import("${gpgmm_root_dir}/build_overrides/gpgmm_features.gni")

# Use Chromium's dcheck_always_on when available so that we respect it when
# running tests on the GPU builders
if (build_with_chromium) {
  import("//build/config/dcheck_always_on.gni")
} else {
  dcheck_always_on = false
}

if (build_with_chromium) {
  import("//build/config/sanitizers/sanitizers.gni")
} else {
  use_fuzzing_engine = false
}

###############################################################################
# Common GPGMM configs
###############################################################################

config("gpgmm_public_config") {
  include_dirs = [
    "${gpgmm_root_dir}/src",
    "${gpgmm_root_dir}/src/include",
  ]
}

config("gpgmm_common_config") {
  defines = []
  if (gpgmm_always_assert || dcheck_always_on || is_debug ||
      use_fuzzing_engine) {
    defines += [ "GPGMM_ENABLE_ASSERTS" ]
  }

  if (use_fuzzing_engine) {
    # Does a hard abort when an assertion fails so that fuzzers catch and parse the failure.
    defines += [ "GPGMM_ABORT_ON_ASSERT" ]
  }

  # Only internal build targets can use this config, this means only targets in
  # this BUILD.gn file and related subdirs.
  visibility = [ "../../*" ]

  cflags = []

  # Enable more warnings that were found when using Dawn in other projects.
  # Add them only when building in standalone because we control which clang
  # version we use. Otherwise we risk breaking projects depending on Dawn when
  # the use a different clang version.
  if (gpgmm_standalone && is_clang) {
    cflags += [
      "-Wconditional-uninitialized",
      "-Wcstring-format-directive",
      "-Wc++11-narrowing",
      "-Wdeprecated-copy",
      "-Wdeprecated-copy-dtor",
      "-Wduplicate-enum",
      "-Wextra-semi-stmt",
      "-Wimplicit-fallthrough",
      "-Winconsistent-missing-destructor-override",
      "-Winvalid-offsetof",
      "-Wmissing-field-initializers",
      "-Wnon-c-typedef-for-linkage",
      "-Wpessimizing-move",
      "-Wrange-loop-analysis",
      "-Wredundant-move",
      "-Wshadow-field",
      "-Wstrict-prototypes",
      "-Wtautological-unsigned-zero-compare",
      "-Wunreachable-code-aggressive",
    ]

    # Allow comparison against type limits that might be tautological on 32bit
    # or 64bit systems. Without this the following produces an error on 64bit:
    #
    #   if (myUint64 > std::numeric_limits<size_t>::max()) {...}
    cflags += [ "-Wno-tautological-type-limit-compare" ]

    if (is_win) {
      cflags += [
        # clang-cl doesn't know -pedantic, pass it explicitly to the clang driver
        "/clang:-pedantic",

        # Allow the use of __uuidof()
        "-Wno-language-extension-token",
      ]
    } else {
      cflags += [ "-pedantic" ]
    }
  }

  if (!is_clang && is_win) {
    # Dawn extends wgpu enums with internal enums.
    # MSVC considers these invalid switch values. crbug.com/dawn/397.
    cflags += [ "/wd4063" ]
    if (gpgmm_is_winuwp) {
      # /ZW makes sure we don't add calls that are forbidden in UWP.
      # and /EHsc is required to be used in combination with it,
      # even if it is already added by the windows GN defaults,
      # we still add it to make every /ZW paired with a /EHsc
      cflags_cc = [
        "/ZW:nostdlib",
        "/EHsc",
      ]
    }

    # MSVC requires a dynamically linked library (.dll) to use a multi-thread
    # dynamic runtime.
    if (gpgmm_shared_library) {
      if (is_debug) {
        cflags += [ "/MDd" ]
      } else {
        cflags += [ "/MD" ]
      }
    }
  }
}

###############################################################################
# Common GPGMM sources
###############################################################################

# This GN file is discovered by all Chromium builds, but common doesn't support
# all of Chromium's OSes so we explicitly make the target visible only on
# systems we know Dawn is able to compile on.
if (is_win || is_linux || is_chromeos || is_mac || is_fuchsia || is_android) {
  source_set("gpgmm_common_sources") {
    sources = [
      "Assert.cpp",
      "Assert.h",
      "Compiler.h",
      "Flags.h",
      "JSONEncoder.cpp",
      "JSONEncoder.h",
      "Limits.h",
      "LinkedList.h",
      "Log.cpp",
      "Log.h",
      "Math.cpp",
      "Math.h",
      "Platform.h",
      "PlatformTime.cpp",
      "PlatformTime.h",
      "RefCount.cpp",
      "RefCount.h",
      "SystemUtils.cpp",
      "SystemUtils.h",
      "Utils.cpp",
      "Utils.h",
    ]

    if (is_win) {
      sources += [ "WindowsTime.cpp" ]
    }

    configs += [ ":gpgmm_common_config" ]
  }
}
