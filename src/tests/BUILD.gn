# Copyright 2012 The Dawn Authors
# Copyright 2022 The GPGMM Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("../../build_overrides/gpgmm_overrides_with_defaults.gni")

import("//testing/test.gni")
import("${gpgmm_root_dir}/build_overrides/gpgmm_features.gni")

group("gpgmm_tests") {
  testonly = true
  deps = [
    ":gpgmm_capture_replay_tests",
    ":gpgmm_end2end_tests",
    ":gpgmm_perf_tests",
    ":gpgmm_unittests",
  ]
}

###############################################################################
# Gtest Gmock - Handle building inside and outside of Chromium.
###############################################################################

# When building outside of Chromium we need to define our own targets for GTest
# and GMock. However when compiling inside of Chromium we need to reuse the
# existing targets, both because Chromium has a special harness for swarming
# and because otherwise the "gn check" fails.

if (!build_with_chromium) {
  # When we aren't in Chromium we define out own targets based on the location
  # of the googletest repo.
  googletest_dir = gpgmm_googletest_dir

  config("gtest_config") {
    include_dirs = [
      "${googletest_dir}/googletest",
      "${googletest_dir}/googletest/include",
    ]
  }

  static_library("gtest") {
    testonly = true
    sources = [ "${googletest_dir}/googletest/src/gtest-all.cc" ]
    public_configs = [ ":gtest_config" ]
  }

  config("gmock_config") {
    include_dirs = [
      "${googletest_dir}/googlemock",
      "${googletest_dir}/googlemock/include",
      "${googletest_dir}/googletest/include",
    ]
  }

  static_library("gmock") {
    testonly = true
    sources = [ "${googletest_dir}/googlemock/src/gmock-all.cc" ]
    public_configs = [ ":gmock_config" ]
  }

  group("gmock_and_gtest") {
    testonly = true
    public_deps = [
      ":gmock",
      ":gtest",
    ]
  }
} else {
  # When we are in Chromium we reuse its targets, and also add some deps that
  # are needed to launch the test in swarming mode.
  group("gmock_and_gtest") {
    testonly = true
    public_deps = [
      "//base",
      "//base/test:test_support",
      "//testing/gmock",
      "//testing/gtest",
    ]
  }
}

###############################################################################
# Unit tests
###############################################################################

test("gpgmm_unittests") {
  configs += [ "${gpgmm_root_dir}/src/gpgmm/common:gpgmm_common_config" ]

  deps = [
    ":gmock_and_gtest",
    "${gpgmm_root_dir}/src/gpgmm:gpgmm_sources",
  ]

  sources = [
    "DummyMemoryAllocator.h",
    "unittests/BuddyBlockAllocatorTests.cpp",
    "unittests/BuddyMemoryAllocatorTests.cpp",
    "unittests/ConditionalMemoryAllocatorTests.cpp",
    "unittests/EnumFlagsTests.cpp",
    "unittests/EventTraceWriterTests.cpp",
    "unittests/LinkedListTests.cpp",
    "unittests/MathTests.cpp",
    "unittests/MemoryAllocatorTests.cpp",
    "unittests/MemoryCacheTests.cpp",
    "unittests/MemoryPoolTests.cpp",
    "unittests/PooledMemoryAllocatorTests.cpp",
    "unittests/RefCountTests.cpp",
    "unittests/SegmentedMemoryAllocatorTests.cpp",
    "unittests/SizeClassTests.cpp",
    "unittests/SlabBlockAllocatorTests.cpp",
    "unittests/SlabMemoryAllocatorTests.cpp",
    "unittests/StableListTests.cpp",
    "unittests/ThreadPoolTests.cpp",
    "unittests/UtilsTest.cpp",
  ]

  sources += [ "UnittestsMain.cpp" ]
}

###############################################################################
# End2End tests
###############################################################################

source_set("gpgmm_end2end_tests_sources") {
  configs += [ "${gpgmm_root_dir}/src/gpgmm/common:gpgmm_common_config" ]
  testonly = true

  deps = [
    ":gmock_and_gtest",
    "${gpgmm_root_dir}/src/gpgmm:gpgmm_sources",
  ]

  sources = []
  libs = []

  if (gpgmm_enable_d3d12) {
    sources += [
      "D3D12Test.cpp",
      "D3D12Test.h",
      "end2end/D3D12ResidencyManagerTests.cpp",
      "end2end/D3D12ResourceAllocatorTests.cpp",
      "end2end/D3D12UnknownTests.cpp",
    ]

    libs += [
      "d3d12.lib",
      "dxgi.lib",
    ]
  }

  if (gpgmm_enable_vk) {
    sources += [
      "VKTest.cpp",
      "VKTest.h",
      "end2end/VKResourceAllocatorTests.cpp",
    ]

    deps += [ "//third_party/vulkan-deps/vulkan-loader/src:libvulkan" ]
  }
}

test("gpgmm_end2end_tests") {
  configs += [ "${gpgmm_root_dir}/src/gpgmm/common:gpgmm_common_config" ]

  deps = [
    ":gmock_and_gtest",
    ":gpgmm_end2end_tests_sources",
    "${gpgmm_root_dir}/src/gpgmm:gpgmm",
  ]

  sources = [
    "GPGMMTest.cpp",
    "GPGMMTest.h",
  ]

  libs = []

  sources += [ "End2EndTestsMain.cpp" ]

  if (is_chromeos) {
    libs += [ "gbm" ]
  }
}

###############################################################################
# Capture replay tests
###############################################################################

trace_index_file_name = "traces.json"

action("generate_capture_replay_trace_index") {
  script = "${gpgmm_root_dir}/scripts/generate_capture_replay_trace_index.py"
  outputs = [ "$target_gen_dir" + "/" + trace_index_file_name ]

  _traces_dir_absolute_path = rebase_path("./capture_replay_tests/traces/")
  _trace_index_file_path =
      rebase_path(target_gen_dir, root_build_dir) + "/" + trace_index_file_name

  args = [
    "--traces_dir",
    _traces_dir_absolute_path,
    "--trace_index",
    _trace_index_file_path,
  ]
}

source_set("gpgmm_capture_replay_tests_sources") {
  configs += [ "${gpgmm_root_dir}/src/gpgmm/common:gpgmm_common_config" ]
  testonly = true

  deps = [
    ":generate_capture_replay_trace_index",
    ":gmock_and_gtest",
    "${gpgmm_root_dir}/src/gpgmm:gpgmm_sources",
    "${gpgmm_root_dir}/third_party/gn/jsoncpp",
  ]

  # Constructs the absolute path to the traces folder. Ensure the traces folder
  # can always be found since gpgmm could be under \\third_party.
  _root_trace_index_path =
      get_path_info(target_gen_dir, "abspath") + "/" + trace_index_file_name
  _root_trace_index_absolute_path = rebase_path(_root_trace_index_path)

  defines = [ "GPGMM_CAPTURE_REPLAY_TESTS_TRACE_INDEX=\"${_root_trace_index_absolute_path}\"" ]

  sources = [ "GPGMMTest.h" ]

  libs = []

  if (gpgmm_enable_d3d12) {
    sources += [
      "capture_replay_tests/GPGMMCaptureReplayTests.cpp",
      "capture_replay_tests/GPGMMCaptureReplayTests.h",
    ]

    libs += [
      "d3d12.lib",
      "dxgi.lib",
    ]
  }
}

test("gpgmm_capture_replay_tests") {
  configs += [ "${gpgmm_root_dir}/src/gpgmm/common:gpgmm_common_config" ]

  deps = [
    ":gmock_and_gtest",
    ":gpgmm_capture_replay_tests_sources",
    "${gpgmm_root_dir}/src/gpgmm:gpgmm",
    "${gpgmm_root_dir}/third_party/gn/jsoncpp",
  ]

  sources = [
    "GPGMMTest.cpp",
    "GPGMMTest.h",
  ]

  if (gpgmm_enable_d3d12) {
    sources += [
      "D3D12Test.cpp",
      "D3D12Test.h",
      "capture_replay_tests/D3D12MemoryTraceReplay.cpp",
    ]
  }

  libs = []

  sources += [ "CaptureReplayTestsMain.cpp" ]

  if (is_chromeos) {
    libs += [ "gbm" ]
  }
}

###############################################################################
# Performance tests
###############################################################################

test("gpgmm_perf_tests") {
  configs += [ "${gpgmm_root_dir}/src/gpgmm/common:gpgmm_common_config" ]

  deps = [
    "${gpgmm_root_dir}/src/gpgmm:gpgmm_sources",
    "//third_party/google_benchmark:google_benchmark",
  ]

  sources = [
    "DummyMemoryAllocator.h",
    "perftests/MemoryAllocatorPerfTests.cpp",
  ]
}
