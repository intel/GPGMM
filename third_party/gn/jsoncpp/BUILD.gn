# Copyright 2021 The GPGMM Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("../../../build_overrides/gpgmm_overrides_with_defaults.gni")

import("//testing/libfuzzer/fuzzer_test.gni")

config("jsoncpp_config") {
  include_dirs = [ "${gpgmm_jsoncpp_dir}/source/include" ]

  # TODO(crbug.com/983223): Update JsonCpp BUILD.gn to remove deprecated
  # declaration flag.
  # This temporary flag allowing clients to update to the new version, and then
  # update to the new StreamWriter and CharReader classes.
  if (!is_win || is_clang) {
    cflags_cc = [ "-Wno-deprecated-declarations" ]
  }
}

source_set("jsoncpp") {
  sources = [
    "${gpgmm_jsoncpp_dir}/source/include/json/allocator.h",
    "${gpgmm_jsoncpp_dir}/source/include/json/assertions.h",
    "${gpgmm_jsoncpp_dir}/source/include/json/config.h",
    "${gpgmm_jsoncpp_dir}/source/include/json/forwards.h",
    "${gpgmm_jsoncpp_dir}/source/include/json/json.h",
    "${gpgmm_jsoncpp_dir}/source/include/json/json_features.h",
    "${gpgmm_jsoncpp_dir}/source/include/json/reader.h",
    "${gpgmm_jsoncpp_dir}/source/include/json/value.h",
    "${gpgmm_jsoncpp_dir}/source/include/json/version.h",
    "${gpgmm_jsoncpp_dir}/source/include/json/writer.h",
    "${gpgmm_jsoncpp_dir}/source/src/lib_json/json_reader.cpp",
    "${gpgmm_jsoncpp_dir}/source/src/lib_json/json_tool.h",
    "${gpgmm_jsoncpp_dir}/source/src/lib_json/json_value.cpp",
    "${gpgmm_jsoncpp_dir}/source/src/lib_json/json_writer.cpp",
  ]

  public_configs = [ ":jsoncpp_config" ]

  defines = [
    "JSON_USE_EXCEPTION=0",
    "JSON_USE_NULLREF=0",
  ]

  include_dirs = [ "${gpgmm_jsoncpp_dir}/source/src/lib_json" ]

  if (!is_win || is_clang) {
    cflags_cc = [ "-Wno-implicit-fallthrough" ]
  }
}

if (build_with_chromium) {
  fuzzer_test("jsoncpp_fuzzer") {
    sources = [ "fuzzers/json_fuzzer.cc" ]

    deps = [ ":jsoncpp" ]

    include_dirs = [ "generated" ]

    dict = "//testing/libfuzzer/fuzzers/dicts/json.dict"
  }
}
